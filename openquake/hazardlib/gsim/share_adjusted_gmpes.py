"""
Al-Atik & Youngs epistemic adjustment
"""
import numpy as np
from openquake.hazardlib.imt import PGA, PGV, SA
from openquake.hazardlib.gsim.base import CoeffsTable
from openquake.hazardlib.gsim.boore_2014 import BooreEtAl2014LowQ
from openquake.hazardlib.gsim.cauzzi_2014 import CauzziEtAl2014
from openquake.hazardlib.gsim.chiou_youngs_2014 import ChiouYoungs2014
from openquake.hazardlib.gsim.pezeshk_2011 import (PezeshkEtAl2011,
                                                   PezeshkEtAl2011NEHRPBC)
from openquake.hazardlib.gsim.edwards_fah_2013a import (
    EdwardsFah2013Alpine10Bars, EdwardsFah2013Alpine20Bars,
    EdwardsFah2013Alpine30Bars, EdwardsFah2013Alpine50Bars,
    EdwardsFah2013Alpine60Bars, EdwardsFah2013Alpine75Bars,
    EdwardsFah2013Alpine90Bars, EdwardsFah2013Alpine120Bars)
from openquake.hazardlib.gsim.edwards_fah_2013f import (
    EdwardsFah2013Foreland10Bars, EdwardsFah2013Foreland20Bars,
    EdwardsFah2013Foreland30Bars, EdwardsFah2013Foreland50Bars,
    EdwardsFah2013Foreland60Bars, EdwardsFah2013Foreland75Bars,
    EdwardsFah2013Foreland90Bars, EdwardsFah2013Foreland120Bars)

from openquake.hazardlib.gsim.abrahamson_2015 import (
    AbrahamsonEtAl2015SInter, AbrahamsonEtAl2015SInterLow,
    AbrahamsonEtAl2015SInterHigh, AbrahamsonEtAl2015SSlab,
    AbrahamsonEtAl2015SSlabLow, AbrahamsonEtAl2015SSlabHigh)

def epistemic_factor_alatik_youngs(mag, rake, period):
    """
    Implements the epistemic adjustment factor of Al-Atik and Youngs (2014)
    """
    if mag < 7.0:
        sigma_mu = 0.083
    else:
        sigma_mu = 0.056 * (mag - 7.0) + 0.083
    if period >= 1.0:
        sigma_mu += (0.0171 * np.log(period))
    if (rake > -120.0) and (rake < -60.0):
        # Normal faulting case increases uncertainty
        sigma_mu += 0.038
    return 1.645 * sigma_mu


EDWARDS_ADJUSTMENTS = CoeffsTable(sa_damping=5, table="""
    imt          800.0    900.0   1000.0   1100.0   1200.0   1300.0   1400.0   1500.0   1600.0   1700.0   1800.0   1900.0   2000.0   2100.0   2200.0   2300.0   2400.0   2500.0
    pga         0.8254   0.8862   0.9431   0.9968   1.0477   1.0962   1.1426   1.1872   1.2301   1.2715   1.3116   1.3505   1.3882   1.4249   1.4607   1.4956   1.5296   1.5629
    0.0100000   0.8254   0.8862   0.9431   0.9968   1.0477   1.0962   1.1426   1.1872   1.2301   1.2715   1.3116   1.3505   1.3882   1.4249   1.4607   1.4956   1.5296   1.5629
    0.0103532   0.8254   0.8862   0.9431   0.9968   1.0476   1.0961   1.1426   1.1871   1.2300   1.2714   1.3115   1.3504   1.3881   1.4248   1.4605   1.4954   1.5294   1.5627
    0.0107189   0.8255   0.8862   0.9431   0.9968   1.0476   1.0961   1.1425   1.1871   1.2299   1.2713   1.3114   1.3502   1.3880   1.4246   1.4604   1.4952   1.5292   1.5625
    0.0110975   0.8255   0.8863   0.9431   0.9968   1.0476   1.0961   1.1425   1.1870   1.2299   1.2713   1.3113   1.3501   1.3878   1.4245   1.4602   1.4950   1.5290   1.5622
    0.0114895   0.8255   0.8863   0.9431   0.9968   1.0476   1.0961   1.1424   1.1869   1.2298   1.2712   1.3112   1.3500   1.3877   1.4243   1.4600   1.4948   1.5288   1.5620
    0.0118953   0.8256   0.8863   0.9432   0.9968   1.0476   1.0960   1.1424   1.1869   1.2297   1.2711   1.3111   1.3499   1.3875   1.4242   1.4598   1.4946   1.5286   1.5618
    0.0123155   0.8256   0.8863   0.9432   0.9968   1.0476   1.0960   1.1423   1.1868   1.2296   1.2710   1.3110   1.3497   1.3874   1.4240   1.4597   1.4944   1.5284   1.5616
    0.0127505   0.8257   0.8864   0.9432   0.9968   1.0476   1.0960   1.1423   1.1867   1.2295   1.2709   1.3109   1.3496   1.3872   1.4238   1.4595   1.4942   1.5281   1.5613
    0.0132009   0.8257   0.8864   0.9432   0.9968   1.0475   1.0959   1.1422   1.1867   1.2295   1.2708   1.3107   1.3495   1.3871   1.4237   1.4593   1.4940   1.5279   1.5611
    0.0136672   0.8257   0.8864   0.9432   0.9968   1.0475   1.0959   1.1422   1.1866   1.2294   1.2707   1.3106   1.3493   1.3869   1.4235   1.4591   1.4938   1.5277   1.5608
    0.0141499   0.8258   0.8865   0.9432   0.9968   1.0475   1.0959   1.1421   1.1865   1.2293   1.2706   1.3105   1.3492   1.3868   1.4233   1.4589   1.4936   1.5275   1.5606
    0.0146497   0.8258   0.8865   0.9433   0.9968   1.0475   1.0958   1.1421   1.1865   1.2292   1.2705   1.3104   1.3491   1.3866   1.4231   1.4587   1.4934   1.5272   1.5603
    0.0151672   0.8259   0.8865   0.9433   0.9968   1.0475   1.0958   1.1420   1.1864   1.2291   1.2703   1.3102   1.3489   1.3864   1.4229   1.4585   1.4931   1.5270   1.5600
    0.0157029   0.8260   0.8866   0.9433   0.9968   1.0475   1.0958   1.1420   1.1863   1.2290   1.2702   1.3101   1.3488   1.3863   1.4228   1.4583   1.4929   1.5267   1.5598
    0.0162575   0.8260   0.8866   0.9433   0.9968   1.0474   1.0957   1.1419   1.1862   1.2289   1.2701   1.3100   1.3486   1.3861   1.4225   1.4581   1.4927   1.5265   1.5595
    0.0168318   0.8261   0.8866   0.9433   0.9968   1.0474   1.0957   1.1419   1.1862   1.2288   1.2700   1.3098   1.3484   1.3859   1.4224   1.4578   1.4924   1.5262   1.5592
    0.0174263   0.8261   0.8867   0.9434   0.9968   1.0474   1.0957   1.1418   1.1861   1.2288   1.2699   1.3097   1.3483   1.3857   1.4222   1.4576   1.4922   1.5260   1.5590
    0.0180419   0.8262   0.8867   0.9434   0.9968   1.0474   1.0956   1.1417   1.1860   1.2286   1.2698   1.3095   1.3481   1.3855   1.4219   1.4574   1.4919   1.5257   1.5586
    0.0186791   0.8262   0.8868   0.9434   0.9968   1.0474   1.0956   1.1417   1.1859   1.2285   1.2696   1.3094   1.3479   1.3853   1.4217   1.4572   1.4917   1.5254   1.5584
    0.0193389   0.8263   0.8868   0.9434   0.9968   1.0474   1.0955   1.1416   1.1858   1.2284   1.2695   1.3093   1.3478   1.3852   1.4215   1.4569   1.4914   1.5251   1.5580
    0.0200220   0.8264   0.8868   0.9434   0.9968   1.0473   1.0955   1.1416   1.1858   1.2283   1.2694   1.3091   1.3476   1.3850   1.4213   1.4567   1.4912   1.5248   1.5577
    0.0207292   0.8264   0.8869   0.9435   0.9968   1.0473   1.0955   1.1415   1.1857   1.2282   1.2693   1.3090   1.3474   1.3848   1.4211   1.4565   1.4909   1.5246   1.5574
    0.0214614   0.8265   0.8869   0.9435   0.9968   1.0473   1.0954   1.1414   1.1856   1.2281   1.2691   1.3088   1.3472   1.3846   1.4208   1.4562   1.4906   1.5242   1.5571
    0.0222195   0.8266   0.8870   0.9435   0.9968   1.0473   1.0954   1.1414   1.1855   1.2280   1.2690   1.3086   1.3471   1.3843   1.4206   1.4559   1.4904   1.5239   1.5568
    0.0230043   0.8266   0.8870   0.9435   0.9968   1.0473   1.0953   1.1413   1.1854   1.2279   1.2689   1.3085   1.3469   1.3842   1.4204   1.4557   1.4901   1.5236   1.5564
    0.0238168   0.8267   0.8871   0.9436   0.9968   1.0472   1.0953   1.1412   1.1853   1.2277   1.2687   1.3083   1.3467   1.3839   1.4201   1.4554   1.4898   1.5233   1.5561
    0.0246581   0.8268   0.8871   0.9436   0.9968   1.0472   1.0952   1.1412   1.1852   1.2276   1.2686   1.3081   1.3465   1.3837   1.4199   1.4551   1.4895   1.5230   1.5558
    0.0255291   0.8268   0.8872   0.9436   0.9968   1.0472   1.0952   1.1411   1.1851   1.2275   1.2684   1.3079   1.3463   1.3835   1.4196   1.4548   1.4891   1.5227   1.5554
    0.0264308   0.8269   0.8872   0.9436   0.9968   1.0472   1.0951   1.1410   1.1850   1.2274   1.2682   1.3078   1.3461   1.3832   1.4194   1.4545   1.4889   1.5223   1.5550
    0.0273644   0.8270   0.8873   0.9437   0.9968   1.0471   1.0951   1.1409   1.1849   1.2273   1.2681   1.3076   1.3459   1.3830   1.4191   1.4543   1.4885   1.5220   1.5547
    0.0283309   0.8271   0.8873   0.9437   0.9968   1.0471   1.0950   1.1408   1.1848   1.2271   1.2679   1.3074   1.3456   1.3828   1.4188   1.4540   1.4882   1.5216   1.5542
    0.0293316   0.8271   0.8874   0.9437   0.9968   1.0471   1.0950   1.1408   1.1847   1.2270   1.2678   1.3072   1.3454   1.3825   1.4186   1.4537   1.4879   1.5213   1.5539
    0.0303677   0.8272   0.8874   0.9437   0.9968   1.0471   1.0949   1.1407   1.1846   1.2268   1.2676   1.3070   1.3452   1.3823   1.4183   1.4534   1.4875   1.5209   1.5535
    0.0314403   0.8273   0.8875   0.9438   0.9968   1.0470   1.0949   1.1406   1.1845   1.2267   1.2674   1.3068   1.3450   1.3820   1.4180   1.4530   1.4872   1.5205   1.5531
    0.0325509   0.8274   0.8876   0.9438   0.9968   1.0470   1.0948   1.1405   1.1844   1.2266   1.2673   1.3066   1.3448   1.3818   1.4177   1.4527   1.4869   1.5202   1.5527
    0.0337007   0.8275   0.8876   0.9438   0.9968   1.0470   1.0948   1.1404   1.1842   1.2264   1.2671   1.3064   1.3445   1.3815   1.4174   1.4524   1.4865   1.5197   1.5522
    0.0348910   0.8276   0.8877   0.9439   0.9968   1.0469   1.0947   1.1403   1.1841   1.2263   1.2669   1.3062   1.3443   1.3812   1.4171   1.4520   1.4861   1.5193   1.5518
    0.0361234   0.8276   0.8877   0.9439   0.9968   1.0469   1.0946   1.1402   1.1840   1.2261   1.2667   1.3060   1.3440   1.3809   1.4168   1.4517   1.4857   1.5189   1.5513
    0.0373994   0.8277   0.8878   0.9439   0.9968   1.0469   1.0946   1.1402   1.1839   1.2259   1.2665   1.3057   1.3437   1.3806   1.4165   1.4513   1.4853   1.5185   1.5509
    0.0387204   0.8278   0.8879   0.9440   0.9968   1.0469   1.0945   1.1401   1.1838   1.2258   1.2664   1.3055   1.3435   1.3803   1.4162   1.4510   1.4850   1.5181   1.5505
    0.0400880   0.8279   0.8879   0.9440   0.9968   1.0468   1.0944   1.1400   1.1836   1.2256   1.2661   1.3053   1.3432   1.3800   1.4158   1.4506   1.4845   1.5176   1.5500
    0.0415041   0.8280   0.8880   0.9441   0.9968   1.0468   1.0944   1.1399   1.1835   1.2255   1.2659   1.3051   1.3430   1.3797   1.4155   1.4502   1.4842   1.5172   1.5495
    0.0429701   0.8281   0.8881   0.9441   0.9968   1.0468   1.0943   1.1397   1.1833   1.2253   1.2657   1.3048   1.3427   1.3794   1.4151   1.4499   1.4837   1.5168   1.5490
    0.0444877   0.8282   0.8881   0.9441   0.9968   1.0467   1.0942   1.1397   1.1832   1.2251   1.2655   1.3046   1.3424   1.3791   1.4148   1.4495   1.4833   1.5163   1.5485
    0.0460592   0.8284   0.8883   0.9442   0.9968   1.0467   1.0942   1.1396   1.1831   1.2250   1.2653   1.3043   1.3421   1.3788   1.4144   1.4491   1.4829   1.5159   1.5481
    0.0476860   0.8285   0.8883   0.9442   0.9968   1.0467   1.0941   1.1394   1.1829   1.2247   1.2651   1.3040   1.3418   1.3784   1.4140   1.4487   1.4824   1.5153   1.5474
    0.0493705   0.8286   0.8884   0.9443   0.9968   1.0466   1.0940   1.1393   1.1828   1.2246   1.2648   1.3038   1.3415   1.3781   1.4137   1.4482   1.4820   1.5148   1.5470
    0.0511143   0.8287   0.8885   0.9442   0.9968   1.0466   1.0940   1.1392   1.1826   1.2244   1.2646   1.3035   1.3412   1.3778   1.4133   1.4478   1.4815   1.5143   1.5464
    0.0529199   0.8288   0.8885   0.9443   0.9968   1.0466   1.0939   1.1391   1.1825   1.2241   1.2644   1.3032   1.3408   1.3774   1.4129   1.4474   1.4810   1.5138   1.5458
    0.0547891   0.8289   0.8886   0.9444   0.9968   1.0465   1.0938   1.1390   1.1823   1.2240   1.2642   1.3030   1.3406   1.3770   1.4125   1.4470   1.4806   1.5133   1.5453
    0.0567244   0.8290   0.8887   0.9444   0.9968   1.0465   1.0937   1.1389   1.1821   1.2237   1.2639   1.3027   1.3402   1.3767   1.4120   1.4465   1.4800   1.5127   1.5446
    0.0587278   0.8292   0.8888   0.9445   0.9968   1.0464   1.0936   1.1388   1.1820   1.2236   1.2636   1.3024   1.3399   1.3763   1.4116   1.4460   1.4795   1.5122   1.5441
    0.0608021   0.8293   0.8889   0.9445   0.9968   1.0464   1.0936   1.1386   1.1818   1.2234   1.2634   1.3021   1.3396   1.3759   1.4112   1.4455   1.4790   1.5116   1.5435
    0.0629497   0.8294   0.8889   0.9445   0.9968   1.0464   1.0935   1.1385   1.1816   1.2231   1.2631   1.3018   1.3392   1.3755   1.4107   1.4450   1.4784   1.5110   1.5428
    0.0651733   0.8296   0.8891   0.9446   0.9968   1.0463   1.0934   1.1384   1.1815   1.2230   1.2629   1.3015   1.3389   1.3751   1.4103   1.4446   1.4780   1.5105   1.5423
    0.0674755   0.8297   0.8891   0.9446   0.9968   1.0463   1.0933   1.1382   1.1812   1.2226   1.2626   1.3011   1.3384   1.3747   1.4098   1.4440   1.4773   1.5098   1.5415
    0.0698587   0.8299   0.8892   0.9447   0.9969   1.0462   1.0932   1.1381   1.1811   1.2225   1.2623   1.3008   1.3381   1.3742   1.4094   1.4435   1.4768   1.5092   1.5409
    0.0723265   0.8300   0.8893   0.9447   0.9968   1.0462   1.0931   1.1379   1.1809   1.2222   1.2620   1.3004   1.3377   1.3738   1.4088   1.4430   1.4761   1.5086   1.5402
    0.0748811   0.8301   0.8894   0.9448   0.9969   1.0461   1.0930   1.1378   1.1807   1.2219   1.2617   1.3001   1.3373   1.3733   1.4083   1.4424   1.4755   1.5079   1.5394
    0.0775260   0.8303   0.8896   0.9449   0.9968   1.0461   1.0929   1.1376   1.1805   1.2218   1.2614   1.2998   1.3369   1.3729   1.4079   1.4419   1.4750   1.5072   1.5388
    0.0802646   0.8304   0.8896   0.9449   0.9969   1.0460   1.0928   1.1375   1.1803   1.2214   1.2611   1.2994   1.3364   1.3724   1.4072   1.4412   1.4742   1.5065   1.5379
    0.0830993   0.8306   0.8898   0.9450   0.9969   1.0460   1.0927   1.1374   1.1801   1.2212   1.2608   1.2991   1.3361   1.3719   1.4068   1.4406   1.4737   1.5058   1.5373
    0.0860348   0.8308   0.8898   0.9450   0.9969   1.0459   1.0926   1.1371   1.1798   1.2209   1.2604   1.2986   1.3356   1.3714   1.4062   1.4400   1.4729   1.5051   1.5364
    0.0890734   0.8309   0.8899   0.9451   0.9969   1.0459   1.0925   1.1370   1.1797   1.2206   1.2601   1.2983   1.3351   1.3709   1.4056   1.4394   1.4723   1.5043   1.5356
    0.0922194   0.8311   0.8901   0.9451   0.9969   1.0458   1.0924   1.1368   1.1794   1.2204   1.2598   1.2978   1.3347   1.3704   1.4051   1.4387   1.4716   1.5035   1.5348
    0.0954772   0.8313   0.8901   0.9452   0.9969   1.0458   1.0923   1.1367   1.1792   1.2200   1.2594   1.2974   1.3341   1.3698   1.4043   1.4381   1.4707   1.5027   1.5338
    0.0988494   0.8315   0.8904   0.9453   0.9969   1.0457   1.0922   1.1365   1.1790   1.2198   1.2591   1.2971   1.3338   1.3693   1.4039   1.4374   1.4702   1.5019   1.5331
    0.1023416   0.8316   0.8904   0.9453   0.9969   1.0457   1.0920   1.1363   1.1786   1.2194   1.2587   1.2965   1.3331   1.3687   1.4031   1.4367   1.4692   1.5010   1.5320
    0.1059558   0.8318   0.8906   0.9454   0.9969   1.0456   1.0919   1.1361   1.1785   1.2191   1.2582   1.2961   1.3326   1.3681   1.4025   1.4359   1.4685   1.5002   1.5311
    0.1096984   0.8320   0.8907   0.9454   0.9969   1.0455   1.0918   1.1359   1.1781   1.2188   1.2579   1.2955   1.3321   1.3674   1.4018   1.4352   1.4677   1.4993   1.5302
    0.1135731   0.8322   0.8908   0.9455   0.9969   1.0455   1.0917   1.1357   1.1779   1.2183   1.2574   1.2951   1.3315   1.3669   1.4010   1.4344   1.4667   1.4984   1.5291
    0.1175848   0.8324   0.8910   0.9456   0.9969   1.0454   1.0915   1.1355   1.1777   1.2181   1.2570   1.2947   1.3310   1.3662   1.4005   1.4336   1.4660   1.4974   1.5282
    0.1217389   0.8326   0.8910   0.9456   0.9969   1.0454   1.0914   1.1353   1.1773   1.2177   1.2566   1.2941   1.3303   1.3655   1.3995   1.4328   1.4649   1.4964   1.5270
    0.1260382   0.8328   0.8913   0.9458   0.9969   1.0453   1.0913   1.1351   1.1771   1.2174   1.2561   1.2937   1.3298   1.3649   1.3989   1.4320   1.4642   1.4955   1.5260
    0.1304904   0.8331   0.8914   0.9458   0.9969   1.0452   1.0911   1.1348   1.1766   1.2169   1.2557   1.2929   1.3291   1.3641   1.3980   1.4310   1.4631   1.4943   1.5248
    0.1350986   0.8333   0.8916   0.9459   0.9969   1.0451   1.0910   1.1346   1.1765   1.2165   1.2552   1.2925   1.3284   1.3634   1.3972   1.4302   1.4621   1.4933   1.5236
    0.1398719   0.8335   0.8917   0.9459   0.9969   1.0451   1.0908   1.1343   1.1761   1.2162   1.2547   1.2918   1.3278   1.3626   1.3964   1.4291   1.4611   1.4921   1.5225
    0.1448121   0.8338   0.8919   0.9461   0.9969   1.0450   1.0906   1.1341   1.1757   1.2156   1.2542   1.2912   1.3270   1.3618   1.3954   1.4282   1.4599   1.4910   1.5211
    0.1499273   0.8340   0.8921   0.9462   0.9969   1.0449   1.0904   1.1339   1.1755   1.2153   1.2536   1.2907   1.3265   1.3610   1.3947   1.4272   1.4590   1.4898   1.5200
    0.1552217   0.8343   0.8922   0.9462   0.9969   1.0448   1.0903   1.1336   1.1750   1.2148   1.2531   1.2899   1.3256   1.3602   1.3936   1.4261   1.4577   1.4885   1.5185
    0.1607045   0.8346   0.8925   0.9464   0.9970   1.0448   1.0901   1.1334   1.1748   1.2144   1.2525   1.2894   1.3250   1.3594   1.3928   1.4252   1.4567   1.4874   1.5173
    0.1663810   0.8348   0.8926   0.9464   0.9969   1.0446   1.0899   1.1330   1.1742   1.2138   1.2519   1.2885   1.3241   1.3583   1.3916   1.4239   1.4554   1.4859   1.5157
    0.1722594   0.8351   0.8929   0.9466   0.9970   1.0446   1.0897   1.1328   1.1739   1.2133   1.2513   1.2880   1.3232   1.3575   1.3906   1.4229   1.4541   1.4847   1.5142
    0.1783421   0.8354   0.8930   0.9466   0.9970   1.0444   1.0895   1.1323   1.1734   1.2128   1.2507   1.2871   1.3224   1.3564   1.3896   1.4215   1.4528   1.4830   1.5127
    0.1846415   0.8357   0.8932   0.9468   0.9970   1.0444   1.0893   1.1321   1.1730   1.2122   1.2500   1.2864   1.3215   1.3555   1.3883   1.4204   1.4514   1.4817   1.5111
    0.1911644   0.8361   0.8935   0.9468   0.9970   1.0442   1.0890   1.1317   1.1726   1.2118   1.2493   1.2856   1.3206   1.3544   1.3873   1.4191   1.4501   1.4801   1.5095
    0.1979179   0.8364   0.8936   0.9470   0.9970   1.0442   1.0889   1.1314   1.1721   1.2111   1.2486   1.2847   1.3196   1.3534   1.3860   1.4178   1.4485   1.4785   1.5077
    0.2049054   0.8368   0.8940   0.9471   0.9970   1.0440   1.0886   1.1311   1.1717   1.2106   1.2479   1.2840   1.3187   1.3523   1.3849   1.4165   1.4471   1.4770   1.5060
    0.2121431   0.8371   0.8941   0.9472   0.9970   1.0439   1.0884   1.1307   1.1710   1.2099   1.2471   1.2829   1.3176   1.3510   1.3835   1.4149   1.4454   1.4751   1.5041
    0.2196402   0.8375   0.8946   0.9475   0.9970   1.0438   1.0882   1.1305   1.1708   1.2094   1.2464   1.2822   1.3166   1.3500   1.3823   1.4136   1.4439   1.4736   1.5023
    0.2273968   0.8378   0.8946   0.9475   0.9970   1.0437   1.0879   1.1299   1.1700   1.2085   1.2455   1.2810   1.3154   1.3485   1.3807   1.4118   1.4421   1.4714   1.5002
    0.2354271   0.8382   0.8951   0.9477   0.9971   1.0436   1.0877   1.1296   1.1696   1.2079   1.2448   1.2802   1.3143   1.3474   1.3793   1.4104   1.4404   1.4698   1.4982
    0.2437419   0.8387   0.8951   0.9478   0.9970   1.0434   1.0873   1.1290   1.1689   1.2071   1.2437   1.2790   1.3131   1.3458   1.3777   1.4085   1.4385   1.4676   1.4959
    0.2523532   0.8390   0.8956   0.9480   0.9971   1.0433   1.0871   1.1287   1.1684   1.2063   1.2429   1.2780   1.3118   1.3446   1.3762   1.4069   1.4367   1.4656   1.4938
    0.2612671   0.8396   0.8958   0.9481   0.9970   1.0431   1.0867   1.1280   1.1677   1.2056   1.2418   1.2768   1.3105   1.3430   1.3745   1.4050   1.4346   1.4634   1.4913
    0.2704969   0.8399   0.8962   0.9483   0.9971   1.0430   1.0865   1.1277   1.1670   1.2047   1.2409   1.2756   1.3092   1.3415   1.3728   1.4032   1.4326   1.4611   1.4890
    0.2800493   0.8405   0.8965   0.9484   0.9971   1.0428   1.0860   1.1271   1.1664   1.2039   1.2397   1.2744   1.3077   1.3399   1.3710   1.4012   1.4304   1.4588   1.4863
    0.2899391   0.8409   0.8969   0.9487   0.9971   1.0427   1.0858   1.1267   1.1656   1.2029   1.2388   1.2730   1.3063   1.3382   1.3692   1.3991   1.4282   1.4563   1.4838
    0.3001831   0.8416   0.8972   0.9488   0.9971   1.0424   1.0853   1.1261   1.1650   1.2020   1.2375   1.2718   1.3047   1.3366   1.3672   1.3971   1.4258   1.4539   1.4811
    0.3107907   0.8420   0.8976   0.9491   0.9971   1.0423   1.0850   1.1255   1.1640   1.2010   1.2364   1.2703   1.3032   1.3346   1.3653   1.3947   1.4235   1.4512   1.4783
    0.3217607   0.8427   0.8980   0.9492   0.9971   1.0421   1.0845   1.1249   1.1634   1.2000   1.2352   1.2690   1.3014   1.3329   1.3631   1.3926   1.4209   1.4486   1.4754
    0.3331335   0.8432   0.8984   0.9495   0.9971   1.0419   1.0842   1.1243   1.1623   1.1989   1.2339   1.2674   1.2998   1.3308   1.3610   1.3900   1.4183   1.4456   1.4722
    0.3448989   0.8440   0.8989   0.9496   0.9971   1.0416   1.0837   1.1237   1.1617   1.1978   1.2326   1.2660   1.2979   1.3289   1.3587   1.3877   1.4156   1.4428   1.4692
    0.3570791   0.8445   0.8993   0.9500   0.9972   1.0415   1.0833   1.1229   1.1605   1.1967   1.2311   1.2642   1.2961   1.3267   1.3564   1.3849   1.4127   1.4396   1.4657
    0.3696858   0.8454   0.8998   0.9501   0.9971   1.0412   1.0828   1.1223   1.1598   1.1954   1.2298   1.2626   1.2941   1.3246   1.3540   1.3824   1.4099   1.4365   1.4625
    0.3827458   0.8459   0.9003   0.9505   0.9972   1.0410   1.0823   1.1214   1.1586   1.1942   1.2281   1.2607   1.2920   1.3222   1.3513   1.3795   1.4067   1.4332   1.4587
    0.3962750   0.8469   0.9008   0.9507   0.9972   1.0407   1.0818   1.1208   1.1577   1.1928   1.2267   1.2590   1.2900   1.3199   1.3488   1.3767   1.4037   1.4297   1.4552
    0.4102732   0.8474   0.9014   0.9510   0.9972   1.0405   1.0813   1.1198   1.1565   1.1915   1.2248   1.2570   1.2877   1.3174   1.3459   1.3736   1.4002   1.4262   1.4513
    0.4247547   0.8485   0.9019   0.9513   0.9972   1.0402   1.0807   1.1191   1.1555   1.1900   1.2233   1.2550   1.2855   1.3149   1.3432   1.3705   1.3970   1.4225   1.4474
    0.4397537   0.8492   0.9026   0.9516   0.9973   1.0400   1.0802   1.1181   1.1542   1.1886   1.2213   1.2529   1.2830   1.3121   1.3401   1.3672   1.3932   1.4187   1.4432
    0.4552905   0.8503   0.9031   0.9519   0.9972   1.0396   1.0796   1.1173   1.1531   1.1870   1.2197   1.2507   1.2807   1.3094   1.3372   1.3638   1.3898   1.4148   1.4391
    0.4713646   0.8511   0.9038   0.9523   0.9973   1.0394   1.0789   1.1162   1.1517   1.1855   1.2175   1.2485   1.2780   1.3065   1.3338   1.3604   1.3858   1.4106   1.4346
    0.4880191   0.8522   0.9044   0.9526   0.9973   1.0390   1.0783   1.1154   1.1504   1.1837   1.2157   1.2461   1.2755   1.3035   1.3307   1.3567   1.3820   1.4065   1.4301
    0.5052546   0.8532   0.9053   0.9530   0.9974   1.0388   1.0776   1.1142   1.1490   1.1821   1.2135   1.2438   1.2725   1.3005   1.3271   1.3530   1.3779   1.4020   1.4255
    0.5231220   0.8543   0.9059   0.9534   0.9973   1.0383   1.0768   1.1132   1.1476   1.1802   1.2115   1.2411   1.2698   1.2972   1.3237   1.3491   1.3738   1.3976   1.4206
    0.5415945   0.8555   0.9068   0.9538   0.9974   1.0381   1.0762   1.1120   1.1461   1.1784   1.2091   1.2387   1.2668   1.2940   1.3200   1.3452   1.3695   1.3929   1.4157
    0.5607267   0.8566   0.9075   0.9542   0.9974   1.0376   1.0753   1.1109   1.1445   1.1764   1.2069   1.2359   1.2638   1.2905   1.3163   1.3411   1.3650   1.3882   1.4105
    0.5805178   0.8580   0.9085   0.9547   0.9975   1.0373   1.0746   1.1097   1.1430   1.1745   1.2045   1.2333   1.2607   1.2871   1.3124   1.3369   1.3605   1.3832   1.4054
    0.6010338   0.8591   0.9093   0.9551   0.9975   1.0368   1.0736   1.1085   1.1412   1.1723   1.2020   1.2303   1.2574   1.2834   1.3084   1.3325   1.3557   1.3782   1.3999
    0.6222388   0.8607   0.9103   0.9556   0.9975   1.0365   1.0730   1.1072   1.1396   1.1704   1.1995   1.2275   1.2542   1.2798   1.3044   1.3281   1.3511   1.3731   1.3945
    0.6442469   0.8620   0.9112   0.9561   0.9975   1.0360   1.0719   1.1058   1.1378   1.1680   1.1969   1.2243   1.2507   1.2759   1.3001   1.3235   1.3459   1.3677   1.3888
    0.6669779   0.8637   0.9122   0.9566   0.9976   1.0357   1.0712   1.1045   1.1361   1.1660   1.1943   1.2214   1.2473   1.2721   1.2960   1.3189   1.3411   1.3625   1.3832
    0.6905600   0.8651   0.9133   0.9572   0.9976   1.0351   1.0700   1.1030   1.1341   1.1634   1.1914   1.2180   1.2436   1.2680   1.2914   1.3140   1.3358   1.3568   1.3772
    0.7149496   0.8668   0.9143   0.9577   0.9976   1.0347   1.0693   1.1017   1.1323   1.1613   1.1888   1.2150   1.2401   1.2641   1.2872   1.3093   1.3307   1.3514   1.3714
    0.7401925   0.8684   0.9154   0.9583   0.9977   1.0341   1.0680   1.1001   1.1302   1.1586   1.1857   1.2115   1.2361   1.2597   1.2823   1.3042   1.3252   1.3455   1.3651
    0.7663422   0.8701   0.9166   0.9589   0.9977   1.0337   1.0673   1.0986   1.1283   1.1563   1.1829   1.2082   1.2324   1.2556   1.2779   1.2993   1.3199   1.3398   1.3591
    0.7933989   0.8719   0.9178   0.9594   0.9977   1.0331   1.0660   1.0970   1.1261   1.1536   1.1798   1.2047   1.2284   1.2512   1.2730   1.2940   1.3143   1.3338   1.3527
    0.8214227   0.8737   0.9190   0.9601   0.9977   1.0326   1.0651   1.0954   1.1241   1.1511   1.1768   1.2012   1.2245   1.2468   1.2683   1.2889   1.3088   1.3280   1.3465
    0.8504848   0.8756   0.9202   0.9607   0.9978   1.0321   1.0639   1.0938   1.1219   1.1484   1.1736   1.1976   1.2205   1.2424   1.2634   1.2836   1.3031   1.3219   1.3400
    0.8805142   0.8776   0.9216   0.9614   0.9978   1.0314   1.0629   1.0921   1.1197   1.1458   1.1705   1.1940   1.2165   1.2379   1.2585   1.2784   1.2974   1.3158   1.3336
    0.9115770   0.8795   0.9228   0.9620   0.9979   1.0310   1.0617   1.0905   1.1175   1.1431   1.1673   1.1904   1.2123   1.2334   1.2536   1.2730   1.2917   1.3098   1.3272
    0.9437524   0.8817   0.9242   0.9627   0.9979   1.0303   1.0605   1.0887   1.1153   1.1403   1.1641   1.1866   1.2082   1.2288   1.2486   1.2676   1.2859   1.3036   1.3207
    0.9771350   0.8838   0.9256   0.9634   0.9980   1.0299   1.0594   1.0871   1.1131   1.1376   1.1609   1.1830   1.2041   1.2243   1.2437   1.2623   1.2802   1.2975   1.3142
    1.0116338   0.8859   0.9270   0.9641   0.9980   1.0291   1.0582   1.0853   1.1108   1.1348   1.1576   1.1792   1.1999   1.2197   1.2386   1.2568   1.2744   1.2913   1.3077
    1.0473398   0.8881   0.9285   0.9648   0.9980   1.0287   1.0571   1.0836   1.1086   1.1321   1.1544   1.1756   1.1958   1.2152   1.2337   1.2515   1.2687   1.2853   1.3013
    1.0843635   0.8902   0.9298   0.9655   0.9981   1.0280   1.0558   1.0818   1.1062   1.1292   1.1510   1.1717   1.1916   1.2105   1.2286   1.2461   1.2629   1.2791   1.2947
    1.1227125   0.8926   0.9314   0.9663   0.9981   1.0275   1.0547   1.0801   1.1040   1.1265   1.1478   1.1682   1.1875   1.2060   1.2238   1.2408   1.2572   1.2731   1.2884
    1.1623852   0.8947   0.9327   0.9669   0.9981   1.0268   1.0534   1.0783   1.1016   1.1236   1.1445   1.1643   1.1832   1.2013   1.2187   1.2354   1.2514   1.2669   1.2819
    1.2033694   0.8971   0.9343   0.9678   0.9982   1.0263   1.0523   1.0766   1.0994   1.1209   1.1413   1.1607   1.1792   1.1969   1.2139   1.2302   1.2459   1.2610   1.2756
    1.2459507   0.8993   0.9357   0.9684   0.9982   1.0256   1.0511   1.0748   1.0971   1.1181   1.1380   1.1570   1.1750   1.1923   1.2089   1.2248   1.2402   1.2550   1.2693
    1.2898233   0.9016   0.9372   0.9692   0.9983   1.0251   1.0499   1.0731   1.0949   1.1154   1.1349   1.1534   1.1710   1.1879   1.2041   1.2197   1.2347   1.2492   1.2631
    1.3354701   0.9039   0.9386   0.9698   0.9983   1.0244   1.0487   1.0713   1.0926   1.1126   1.1317   1.1497   1.1670   1.1835   1.1993   1.2145   1.2291   1.2433   1.2569
    1.3825522   0.9062   0.9401   0.9706   0.9983   1.0239   1.0476   1.0697   1.0904   1.1100   1.1286   1.1462   1.1631   1.1792   1.1946   1.2095   1.2238   1.2376   1.2509
    1.4314343   0.9085   0.9416   0.9713   0.9984   1.0233   1.0464   1.0679   1.0882   1.1073   1.1255   1.1427   1.1591   1.1749   1.1899   1.2044   1.2184   1.2319   1.2449
    1.4819206   0.9107   0.9430   0.9720   0.9984   1.0227   1.0453   1.0663   1.0861   1.1048   1.1224   1.1393   1.1553   1.1707   1.1854   1.1996   1.2132   1.2263   1.2391
    1.5344484   0.9130   0.9444   0.9727   0.9985   1.0221   1.0441   1.0647   1.0840   1.1022   1.1194   1.1358   1.1515   1.1665   1.1809   1.1947   1.2080   1.2209   1.2333
    1.5885624   0.9152   0.9458   0.9734   0.9985   1.0216   1.0430   1.0631   1.0819   1.0997   1.1165   1.1325   1.1478   1.1624   1.1765   1.1900   1.2030   1.2155   1.2276
    1.6447368   0.9174   0.9472   0.9741   0.9985   1.0210   1.0420   1.0615   1.0798   1.0972   1.1136   1.1292   1.1441   1.1584   1.1721   1.1853   1.1980   1.2102   1.2221
    1.7027073   0.9195   0.9486   0.9748   0.9986   1.0205   1.0409   1.0599   1.0778   1.0947   1.1108   1.1260   1.1406   1.1545   1.1679   1.1807   1.1931   1.2051   1.2166
    1.7630465   0.9216   0.9499   0.9754   0.9986   1.0200   1.0398   1.0584   1.0758   1.0923   1.1080   1.1228   1.1370   1.1506   1.1637   1.1762   1.1883   1.2000   1.2113
    1.8251506   0.9237   0.9512   0.9761   0.9987   1.0195   1.0388   1.0569   1.0739   1.0900   1.1052   1.1198   1.1336   1.1469   1.1596   1.1718   1.1837   1.1951   1.2060
    1.8896447   0.9257   0.9526   0.9767   0.9987   1.0190   1.0378   1.0555   1.0720   1.0877   1.1026   1.1167   1.1302   1.1432   1.1556   1.1676   1.1790   1.1901   1.2009
    1.9565643   0.9278   0.9538   0.9773   0.9987   1.0185   1.0369   1.0540   1.0702   1.0855   1.1000   1.1138   1.1270   1.1396   1.1517   1.1633   1.1745   1.1854   1.1959
    2.0255216   0.9297   0.9550   0.9779   0.9988   1.0180   1.0359   1.0526   1.0684   1.0833   1.0974   1.1109   1.1237   1.1360   1.1478   1.1592   1.1702   1.1807   1.1909
    2.0968757   0.9316   0.9562   0.9785   0.9988   1.0175   1.0350   1.0513   1.0666   1.0811   1.0949   1.1080   1.1206   1.1326   1.1441   1.1552   1.1658   1.1761   1.1861
    2.1710812   0.9334   0.9574   0.9790   0.9988   1.0171   1.0340   1.0499   1.0649   1.0790   1.0924   1.1052   1.1175   1.1292   1.1404   1.1512   1.1616   1.1717   1.1813
    2.2476961   0.9353   0.9586   0.9796   0.9989   1.0166   1.0332   1.0486   1.0632   1.0770   1.0901   1.1025   1.1144   1.1258   1.1368   1.1474   1.1575   1.1672   1.1767
    2.3272050   0.9370   0.9597   0.9802   0.9989   1.0162   1.0323   1.0473   1.0615   1.0750   1.0877   1.0999   1.1115   1.1226   1.1333   1.1435   1.1534   1.1629   1.1722
    2.4096386   0.9388   0.9608   0.9807   0.9989   1.0157   1.0314   1.0461   1.0599   1.0730   1.0854   1.0973   1.1086   1.1194   1.1298   1.1398   1.1494   1.1587   1.1676
    2.4943876   0.9404   0.9619   0.9812   0.9989   1.0153   1.0306   1.0449   1.0583   1.0711   1.0832   1.0947   1.1057   1.1163   1.1264   1.1361   1.1455   1.1545   1.1632
    2.5826446   0.9421   0.9629   0.9817   0.9990   1.0149   1.0298   1.0437   1.0568   1.0692   1.0810   1.0922   1.1030   1.1132   1.1230   1.1325   1.1416   1.1505   1.1590
    2.6737968   0.9437   0.9639   0.9822   0.9990   1.0145   1.0290   1.0425   1.0553   1.0674   1.0788   1.0898   1.1002   1.1102   1.1198   1.1290   1.1379   1.1464   1.1547
    2.7685493   0.9453   0.9649   0.9827   0.9990   1.0141   1.0282   1.0414   1.0538   1.0656   1.0767   1.0873   1.0975   1.1073   1.1166   1.1255   1.1341   1.1425   1.1505
    2.8661508   0.9468   0.9659   0.9832   0.9991   1.0137   1.0274   1.0403   1.0523   1.0638   1.0746   1.0850   1.0949   1.1043   1.1134   1.1221   1.1305   1.1386   1.1464
    2.9673591   0.9483   0.9668   0.9837   0.9991   1.0134   1.0267   1.0391   1.0509   1.0620   1.0726   1.0826   1.0922   1.1015   1.1103   1.1188   1.1269   1.1347   1.1423
    3.0721966   0.9497   0.9678   0.9841   0.9991   1.0130   1.0259   1.0381   1.0495   1.0603   1.0706   1.0804   1.0897   1.0987   1.1072   1.1154   1.1233   1.1310   1.1384
    3.1806616   0.9512   0.9687   0.9846   0.9991   1.0126   1.0252   1.0370   1.0481   1.0586   1.0686   1.0781   1.0872   1.0958   1.1042   1.1122   1.1199   1.1273   1.1344
    3.2927231   0.9525   0.9696   0.9850   0.9992   1.0123   1.0245   1.0360   1.0468   1.0570   1.0667   1.0759   1.0847   1.0931   1.1012   1.1089   1.1164   1.1235   1.1304
    3.4094783   0.9539   0.9704   0.9854   0.9992   1.0119   1.0238   1.0349   1.0454   1.0553   1.0647   1.0737   1.0823   1.0904   1.0982   1.1057   1.1130   1.1199   1.1267
    3.5298270   0.9552   0.9713   0.9858   0.9992   1.0116   1.0231   1.0339   1.0441   1.0537   1.0629   1.0715   1.0798   1.0877   1.0953   1.1026   1.1096   1.1163   1.1228
    3.6549708   0.9566   0.9721   0.9863   0.9992   1.0112   1.0224   1.0329   1.0428   1.0521   1.0610   1.0694   1.0774   1.0851   1.0924   1.0995   1.1062   1.1127   1.1190
    3.7835793   0.9578   0.9729   0.9867   0.9992   1.0109   1.0218   1.0319   1.0415   1.0506   1.0592   1.0673   1.0751   1.0825   1.0896   1.0964   1.1029   1.1092   1.1153
    3.9169604   0.9591   0.9738   0.9871   0.9993   1.0106   1.0211   1.0310   1.0403   1.0490   1.0573   1.0652   1.0727   1.0799   1.0868   1.0934   1.0996   1.1057   1.1115
    4.0551500   0.9604   0.9746   0.9875   0.9993   1.0102   1.0205   1.0300   1.0390   1.0474   1.0555   1.0631   1.0704   1.0773   1.0839   1.0902   1.0963   1.1022   1.1078
    4.1981528   0.9616   0.9754   0.9879   0.9993   1.0099   1.0198   1.0290   1.0377   1.0459   1.0537   1.0611   1.0681   1.0747   1.0811   1.0872   1.0931   1.0988   1.1041
    4.3478261   0.9628   0.9761   0.9882   0.9993   1.0096   1.0192   1.0281   1.0365   1.0444   1.0519   1.0590   1.0658   1.0722   1.0784   1.0842   1.0898   1.0952   1.1004
    4.5004500   0.9640   0.9769   0.9886   0.9994   1.0093   1.0185   1.0272   1.0353   1.0429   1.0501   1.0570   1.0635   1.0697   1.0756   1.0812   1.0866   1.0918   1.0968
    4.6598322   0.9652   0.9777   0.9890   0.9994   1.0090   1.0179   1.0262   1.0341   1.0414   1.0484   1.0549   1.0612   1.0672   1.0728   1.0783   1.0835   1.0885   1.0933
    4.8239267   0.9663   0.9784   0.9894   0.9994   1.0087   1.0173   1.0253   1.0328   1.0399   1.0466   1.0529   1.0590   1.0647   1.0702   1.0755   1.0805   1.0853   1.0900
    4.9950050   0.9675   0.9792   0.9897   0.9994   1.0084   1.0166   1.0244   1.0316   1.0385   1.0449   1.0510   1.0568   1.0624   1.0677   1.0728   1.0776   1.0823   1.0868
    5.1706308   0.9686   0.9799   0.9901   0.9994   1.0080   1.0160   1.0235   1.0305   1.0371   1.0433   1.0492   1.0548   1.0601   1.0653   1.0701   1.0748   1.0793   1.0837
    5.3533191   0.9698   0.9806   0.9905   0.9995   1.0078   1.0154   1.0226   1.0294   1.0357   1.0417   1.0474   1.0528   1.0580   1.0629   1.0676   1.0722   1.0765   1.0807
    5.5432373   0.9709   0.9814   0.9908   0.9995   1.0075   1.0149   1.0218   1.0283   1.0344   1.0402   1.0457   1.0509   1.0559   1.0607   1.0652   1.0696   1.0738   1.0778
    5.7372347   0.9720   0.9821   0.9912   0.9995   1.0072   1.0143   1.0210   1.0273   1.0332   1.0388   1.0441   1.0491   1.0539   1.0585   1.0629   1.0671   1.0712   1.0751
    5.9417706   0.9730   0.9827   0.9915   0.9995   1.0069   1.0138   1.0202   1.0263   1.0320   1.0374   1.0425   1.0473   1.0520   1.0564   1.0607   1.0647   1.0686   1.0724
    6.1500615   0.9740   0.9834   0.9918   0.9995   1.0067   1.0133   1.0195   1.0253   1.0308   1.0360   1.0409   1.0456   1.0501   1.0544   1.0585   1.0624   1.0662   1.0699
    6.3694268   0.9750   0.9840   0.9921   0.9996   1.0064   1.0128   1.0188   1.0244   1.0297   1.0347   1.0395   1.0440   1.0483   1.0525   1.0564   1.0602   1.0639   1.0674
    6.5919578   0.9759   0.9846   0.9924   0.9996   1.0062   1.0124   1.0181   1.0235   1.0286   1.0335   1.0381   1.0424   1.0466   1.0506   1.0544   1.0581   1.0616   1.0650
    6.8259386   0.9768   0.9851   0.9927   0.9996   1.0060   1.0119   1.0175   1.0227   1.0276   1.0323   1.0367   1.0409   1.0450   1.0488   1.0525   1.0560   1.0594   1.0627
    7.0671378   0.9776   0.9857   0.9929   0.9996   1.0058   1.0115   1.0168   1.0219   1.0266   1.0311   1.0354   1.0395   1.0434   1.0471   1.0506   1.0541   1.0573   1.0605
    7.3152890   0.9784   0.9862   0.9932   0.9996   1.0056   1.0111   1.0162   1.0211   1.0257   1.0300   1.0342   1.0381   1.0418   1.0454   1.0489   1.0522   1.0553   1.0584
    7.5757576   0.9792   0.9867   0.9934   0.9996   1.0054   1.0107   1.0157   1.0203   1.0248   1.0290   1.0329   1.0367   1.0403   1.0438   1.0471   1.0503   1.0534   1.0563
    7.8431373   0.9800   0.9872   0.9937   0.9996   1.0052   1.0103   1.0151   1.0196   1.0239   1.0279   1.0318   1.0354   1.0389   1.0423   1.0455   1.0486   1.0515   1.0544
    8.1168831   0.9807   0.9876   0.9939   0.9997   1.0050   1.0099   1.0146   1.0189   1.0230   1.0269   1.0306   1.0342   1.0376   1.0408   1.0439   1.0468   1.0497   1.0525
    8.4033613   0.9814   0.9881   0.9941   0.9997   1.0048   1.0096   1.0140   1.0183   1.0222   1.0260   1.0296   1.0330   1.0362   1.0393   1.0423   1.0452   1.0480   1.0506
    8.7032202   0.9821   0.9885   0.9943   0.9997   1.0046   1.0092   1.0135   1.0176   1.0214   1.0251   1.0285   1.0318   1.0350   1.0380   1.0408   1.0436   1.0463   1.0489
    9.0090090   0.9827   0.9889   0.9945   0.9997   1.0045   1.0089   1.0131   1.0170   1.0207   1.0242   1.0275   1.0307   1.0337   1.0366   1.0394   1.0421   1.0447   1.0471
    9.3283582   0.9834   0.9893   0.9947   0.9997   1.0043   1.0086   1.0126   1.0164   1.0199   1.0233   1.0265   1.0296   1.0325   1.0353   1.0380   1.0406   1.0431   1.0455
    9.6618357   0.9839   0.9897   0.9949   0.9997   1.0042   1.0083   1.0122   1.0158   1.0192   1.0225   1.0256   1.0286   1.0314   1.0341   1.0367   1.0392   1.0416   1.0439
    10.000000   0.9845   0.9901   0.9951   0.9997   1.0040   1.0080   1.0117   1.0152   1.0186   1.0217   1.0247   1.0276   1.0303   1.0329   1.0354   1.0378   1.0401   1.0424
    """)


def get_edwards_amplification(imt, vs30):
    """
    Returns the Edwards amplification factors
    """
    amp = EDWARDS_ADJUSTMENTS[imt]
    vs30_vals = np.sort(np.array([
        [float(key), np.log(float(val))] for key, val in amp.iteritems()
        ]))
    interpolator = interp1d(vs30_vals[:, 0], vs30_vals[:, 1], 
                            bounds_error=True)
    return interpolator(vs30)

def edwards_vs30_800(mean, imt):
    """
    If adjusting to Vs30 800 then don't need interpolation. Just return
    the amplification factors for 800 m/s
    """
    amp = EDWARDS_ADJUSTMENTS[imt]
    return mean - np.log(amp["800.0"])


class BooreEtAl2014LowQEpiHigh(BooreEtAl2014LowQ):
    """
    Apply positive epistemic uncertainty adjustments to Boore et al. GMPE
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """

        """
        mean, stddevs = super(BooreEtAl2014LowQEpiHigh,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        if isinstance(imt, SA):
            factor = epistemic_factor_alatik_youngs(rup.mag,
                                                    rup.rake,
                                                    imt.period)
        elif isinstance(imt, PGA):
            # PGA case
            factor = epistemic_factor_alatik_youngs(rup.mag, rup.rake, 0.01)
        else:
            raise ValueError("Epistemic Adjustment not supported for %s"
                             % str(imt))
        return mean + factor, stddevs

class BooreEtAl2014LowQEpiLow(BooreEtAl2014LowQ):
    """
    Apply negative epistemic uncertainty adjustments to Boore et al. GMPE
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """

        """
        mean, stddevs = super(BooreEtAl2014LowQEpiLow,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        if isinstance(imt, SA):
            factor = epistemic_factor_alatik_youngs(rup.mag,
                                                    rup.rake,
                                                    imt.period)
        elif isinstance(imt, PGA):
            # PGA case
            factor = epistemic_factor_alatik_youngs(rup.mag, rup.rake, 0.01)
        else:
            raise ValueError("Epistemic Adjustment not supported for %s"
                             % str(imt))
        return mean - factor, stddevs
            
            
class ChiouYoungs2014EpiHigh(ChiouYoungs2014):
    """
    Apply positive epistemic uncertainty adjustments to Chiou & Youngs GMPE
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """

        """
        mean, stddevs = super(ChiouYoungs2014EpiHigh,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        if isinstance(imt, SA):
            factor = epistemic_factor_alatik_youngs(rup.mag,
                                                    rup.rake,
                                                    imt.period)
        elif isinstance(imt, PGA):
            # PGA case
            factor = epistemic_factor_alatik_youngs(rup.mag, rup.rake, 0.01)
        else:
            raise ValueError("Epistemic Adjustment not supported for %s"
                             % str(imt))
        return mean + factor, stddevs


class ChiouYoungs2014EpiLow(ChiouYoungs2014):
    """
    Apply negative epistemic uncertainty adjustments to Chiou & Youngs GMPE
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """

        """
        mean, stddevs = super(ChiouYoungs2014EpiLow,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        if isinstance(imt, SA):
            factor = epistemic_factor_alatik_youngs(rup.mag,
                                                    rup.rake,
                                                    imt.period)
        elif isinstance(imt, PGA):
            # PGA case
            factor = epistemic_factor_alatik_youngs(rup.mag, rup.rake, 0.01)
        else:
            raise ValueError("Epistemic Adjustment not supported for %s"
                             % str(imt))
        return mean - factor, stddevs


class CauzziEtAl2014EpiHigh(CauzziEtAl2014):
    """
    Apply positive epistemic uncertainty adjustments to Cauzzi et al. GMPE
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """

        """
        mean, stddevs = super(CauzziEtAl2014EpiHigh,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        if isinstance(imt, SA):
            factor = epistemic_factor_alatik_youngs(rup.mag,
                                                    rup.rake,
                                                    imt.period)
        elif isinstance(imt, PGA):
            # PGA case
            factor = epistemic_factor_alatik_youngs(rup.mag, rup.rake, 0.01)
        else:
            raise ValueError("Epistemic Adjustment not supported for %s"
                             % str(imt))
        return mean + factor, stddevs


class CauzziEtAl2014EpiLow(CauzziEtAl2014):
    """
    Apply negative epistemic uncertainty adjustments to Chiou & Youngs GMPE
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """

        """
        mean, stddevs = super(CauzziEtAl2014EpiLow,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        if isinstance(imt, SA):
            factor = epistemic_factor_alatik_youngs(rup.mag,
                                                    rup.rake,
                                                    imt.period)
        elif isinstance(imt, PGA):
            # PGA case
            factor = epistemic_factor_alatik_youngs(rup.mag, rup.rake, 0.01)
        else:
            raise ValueError("Epistemic Adjustment not supported for %s"
                             % str(imt))
        return mean - factor, stddevs


class EdwardsFah2013Alpine10Bars800(EdwardsFah2013Alpine10Bars):
    """
    Adjustment of Edwards & Fah 2013 Alpine GMPE 10 bars from Vs30 1100 to 800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Alpine10Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Alpine20Bars800(EdwardsFah2013Alpine20Bars):
    """
    Adjustment of Edwards & Fah 2013 Alpine GMPE 20 bars from Vs30 1100 to 800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Alpine20Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Alpine30Bars800(EdwardsFah2013Alpine30Bars):
    """
    Adjustment of Edwards & Fah 2013 Alpine GMPE 30 bars from Vs30 1100 to 800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Alpine30Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Alpine50Bars800(EdwardsFah2013Alpine50Bars):
    """
    Adjustment of Edwards & Fah 2013 Alpine GMPE 50 bars from Vs30 1100 to 800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Alpine50Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Alpine60Bars800(EdwardsFah2013Alpine60Bars):
    """
    Adjustment of Edwards & Fah 2013 Alpine GMPE 60 bars from Vs30 1100 to 800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Alpine60Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Alpine75Bars800(EdwardsFah2013Alpine75Bars):
    """
    Adjustment of Edwards & Fah 2013 Alpine GMPE 75 bars from Vs30 1100 to 800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Alpine75Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Alpine90Bars800(EdwardsFah2013Alpine90Bars):
    """
    Adjustment of Edwards & Fah 2013 Alpine GMPE 90 bars from Vs30 1100 to 800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Alpine90Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Alpine120Bars800(EdwardsFah2013Alpine120Bars):
    """
    Adjustment of Edwards & Fah 2013 Alpine GMPE 120 bars from Vs30 1100 to 800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Alpine120Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Foreland10Bars800(EdwardsFah2013Foreland10Bars):
    """
    Adjustment of Edwards & Fah 2013 Foreland GMPE 10 bars from Vs30 1100 to
    800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Foreland10Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Foreland20Bars800(EdwardsFah2013Foreland20Bars):
    """
    Adjustment of Edwards & Fah 2013 Foreland GMPE 20 bars from Vs30 1100 to
    800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Foreland20Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Foreland30Bars800(EdwardsFah2013Foreland30Bars):
    """
    Adjustment of Edwards & Fah 2013 Foreland GMPE 30 bars from Vs30 1100 to
    800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Foreland30Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Foreland50Bars800(EdwardsFah2013Foreland50Bars):
    """
    Adjustment of Edwards & Fah 2013 Foreland GMPE 50 bars from Vs30 1100 to
    800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Foreland50Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Foreland60Bars800(EdwardsFah2013Foreland60Bars):
    """
    Adjustment of Edwards & Fah 2013 Foreland GMPE 60 bars from Vs30 1100 to
    800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Foreland60Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Foreland75Bars800(EdwardsFah2013Foreland75Bars):
    """
    Adjustment of Edwards & Fah 2013 Foreland GMPE 75 bars from Vs30 1100 to
    800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Foreland75Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Foreland90Bars800(EdwardsFah2013Foreland90Bars):
    """
    Adjustment of Edwards & Fah 2013 Foreland GMPE 90 bars from Vs30 1100 to
    800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Foreland90Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs


class EdwardsFah2013Foreland120Bars800(EdwardsFah2013Foreland120Bars):
    """
    Adjustment of Edwards & Fah 2013 Foreland GMPE 10 bars from Vs30 1100 to
    800
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(EdwardsFah2013Foreland120Bars800,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        return edwards_vs30_800(mean, imt), stddevs

class PezeshkEtAl2011Swiss(PezeshkEtAl2011):
    """
    Pezeshk et al., 2011, Adjused to the Edwards Swiss Rock Condition
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        """
        mean, stddevs = super(PezeshkEtAl2011Swiss,
            self).get_mean_and_stddevs(sites, rup, dists, imt, stddev_types)
        swiss_amp = EDWARDS_ADJUSTMENTS[imt]
        amp_factor = np.log(swiss_amp["2000.0"] / swiss_amp["800.0"])
        return mean + amp_factor, stddevs

class PezeshkEtAl2011AB11(PezeshkEtAl2011):
    """
    Modification to Pezeshk et al that adds the amplification factors of
    Atkinson  Boore 2011
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        See :meth:`superclass method
        <.base.GroundShakingIntensityModel.get_mean_and_stddevs>`
        for spec of input and result values.
        """
        C_AMP = self.SITE_COEFFS[imt]
        # Get method from superclass
        mean, stddevs = super(
            PezeshkEtAl2011AB11, self).get_mean_and_stddevs(
                sites, rup, dists, imt, stddev_types)
        return mean + np.log(C_AMP["F"]), stddevs


    SITE_COEFFS = CoeffsTable(sa_damping=5, table="""
    IMT            F
    pgv       1.3700
    pga       1.0400
    0.01      0.1700
    0.02      0.1700
    0.10      1.0400
    0.20      1.3100
    0.32      1.4100
    0.50      1.4000
    1.00      1.2700
    2.00      1.2600
    3.20      1.1800
    5.00      1.1000
    10.0      1.0000
    """)


#############################################################################
####     BC HYDRO - Interface
#############################################################################

BC_HYDRO_EPISTEMIC = 0.3033 * 1.581


class AbrahamsonEtAl2015SInterEpiLow(AbrahamsonEtAl2015SInter):
    """
    Modification to Abrahamson et al. (2015) BC Hydro GMPE for the "central"
    branch and "low" epistemic adjustment (proposed in the Hanford Site PSHA)
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        See :meth:`superclass method
        <.base.GroundShakingIntensityModel.get_mean_and_stddevs>`
        for spec of input and result values.
        """
        # Get method from superclass
        mean, stddevs = super(
            AbrahamsonEtAl2015SInterEpiLow, self).get_mean_and_stddevs(
                sites, rup, dists, imt, stddev_types)
        return mean - BC_HYDRO_EPISTEMIC, stddevs


class AbrahamsonEtAl2015SInterEpiHigh(AbrahamsonEtAl2015SInter):
    """
    Modification to Abrahamson et al. (2015) BC Hydro GMPE for the "central"
    branch and "high" epistemic adjustment (proposed in the Hanford Site PSHA)
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        See :meth:`superclass method
        <.base.GroundShakingIntensityModel.get_mean_and_stddevs>`
        for spec of input and result values.
        """
        # Get method from superclass
        mean, stddevs = super(
            AbrahamsonEtAl2015SInterEpiHigh, self).get_mean_and_stddevs(
                sites, rup, dists, imt, stddev_types)
        return mean + BC_HYDRO_EPISTEMIC, stddevs


class AbrahamsonEtAl2015SInterLowEpiLow(AbrahamsonEtAl2015SInterLow):
    """
    Modification to Abrahamson et al. (2015) BC Hydro GMPE for the "lower"
    branch and "low" epistemic adjustment (proposed in the Hanford Site PSHA)
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        See :meth:`superclass method
        <.base.GroundShakingIntensityModel.get_mean_and_stddevs>`
        for spec of input and result values.
        """
        # Get method from superclass
        mean, stddevs = super(
            AbrahamsonEtAl2015SInterLowEpiLow, self).get_mean_and_stddevs(
                sites, rup, dists, imt, stddev_types)
        return mean - BC_HYDRO_EPISTEMIC, stddevs


class AbrahamsonEtAl2015SInterLowEpiHigh(AbrahamsonEtAl2015SInterLow):
    """
    Modification to Abrahamson et al. (2015) BC Hydro GMPE for the "low"
    branch and "high" epistemic adjustment (proposed in the Hanford Site PSHA)
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        See :meth:`superclass method
        <.base.GroundShakingIntensityModel.get_mean_and_stddevs>`
        for spec of input and result values.
        """
        # Get method from superclass
        mean, stddevs = super(
            AbrahamsonEtAl2015SInterLowEpiHigh, self).get_mean_and_stddevs(
                sites, rup, dists, imt, stddev_types)
        return mean + BC_HYDRO_EPISTEMIC, stddevs


class AbrahamsonEtAl2015SInterHighEpiLow(AbrahamsonEtAl2015SInterHigh):
    """
    Modification to Abrahamson et al. (2015) BC Hydro GMPE for the "high"
    branch and "low" epistemic adjustment (proposed in the Hanford Site PSHA)
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        See :meth:`superclass method
        <.base.GroundShakingIntensityModel.get_mean_and_stddevs>`
        for spec of input and result values.
        """
        # Get method from superclass
        mean, stddevs = super(
            AbrahamsonEtAl2015SInterHighEpiLow, self).get_mean_and_stddevs(
                sites, rup, dists, imt, stddev_types)
        return mean - BC_HYDRO_EPISTEMIC, stddevs


class AbrahamsonEtAl2015SInterHighEpiHigh(AbrahamsonEtAl2015SInterHigh):
    """
    Modification to Abrahamson et al. (2015) BC Hydro GMPE for the "high"
    branch and "high" epistemic adjustment (proposed in the Hanford Site PSHA)
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        See :meth:`superclass method
        <.base.GroundShakingIntensityModel.get_mean_and_stddevs>`
        for spec of input and result values.
        """
        # Get method from superclass
        mean, stddevs = super(
            AbrahamsonEtAl2015SInterHighEpiHigh, self).get_mean_and_stddevs(
                sites, rup, dists, imt, stddev_types)
        return mean + BC_HYDRO_EPISTEMIC, stddevs



#############################################################################
####     BC HYDRO - InSlab
#############################################################################

class AbrahamsonEtAl2015SSlabEpiLow(AbrahamsonEtAl2015SSlab):
    """
    Modification to Abrahamson et al. (2015) BC Hydro GMPE for the "central"
    branch and "low" epistemic adjustment (proposed in the Hanford Site PSHA)
    - Inslab
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        See :meth:`superclass method
        <.base.GroundShakingIntensityModel.get_mean_and_stddevs>`
        for spec of input and result values.
        """
        # Get method from superclass
        mean, stddevs = super(
            AbrahamsonEtAl2015SSlabEpiLow, self).get_mean_and_stddevs(
                sites, rup, dists, imt, stddev_types)
        return mean - BC_HYDRO_EPISTEMIC, stddevs


class AbrahamsonEtAl2015SSlabEpiHigh(AbrahamsonEtAl2015SSlab):
    """
    Modification to Abrahamson et al. (2015) BC Hydro GMPE for the "central"
    branch and "high" epistemic adjustment (proposed in the Hanford Site PSHA)
    - Inslab
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        See :meth:`superclass method
        <.base.GroundShakingIntensityModel.get_mean_and_stddevs>`
        for spec of input and result values.
        """
        # Get method from superclass
        mean, stddevs = super(
            AbrahamsonEtAl2015SSlabEpiHigh, self).get_mean_and_stddevs(
                sites, rup, dists, imt, stddev_types)
        return mean + BC_HYDRO_EPISTEMIC, stddevs


class AbrahamsonEtAl2015SSlabLowEpiLow(AbrahamsonEtAl2015SSlabLow):
    """
    Modification to Abrahamson et al. (2015) BC Hydro GMPE for the "lower"
    branch and "low" epistemic adjustment (proposed in the Hanford Site PSHA)
    - Inslab
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        See :meth:`superclass method
        <.base.GroundShakingIntensityModel.get_mean_and_stddevs>`
        for spec of input and result values.
        """
        # Get method from superclass
        mean, stddevs = super(
            AbrahamsonEtAl2015SSlabLowEpiLow, self).get_mean_and_stddevs(
                sites, rup, dists, imt, stddev_types)
        return mean - BC_HYDRO_EPISTEMIC, stddevs


class AbrahamsonEtAl2015SSlabLowEpiHigh(AbrahamsonEtAl2015SSlabLow):
    """
    Modification to Abrahamson et al. (2015) BC Hydro GMPE for the "low"
    branch and "high" epistemic adjustment (proposed in the Hanford Site PSHA)
    - Inslab
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        See :meth:`superclass method
        <.base.GroundShakingIntensityModel.get_mean_and_stddevs>`
        for spec of input and result values.
        """
        # Get method from superclass
        mean, stddevs = super(
            AbrahamsonEtAl2015SSlabLowEpiHigh, self).get_mean_and_stddevs(
                sites, rup, dists, imt, stddev_types)
        return mean + BC_HYDRO_EPISTEMIC, stddevs


class AbrahamsonEtAl2015SSlabHighEpiLow(AbrahamsonEtAl2015SSlabHigh):
    """
    Modification to Abrahamson et al. (2015) BC Hydro GMPE for the "high"
    branch and "low" epistemic adjustment (proposed in the Hanford Site PSHA)
    - Inslab
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        See :meth:`superclass method
        <.base.GroundShakingIntensityModel.get_mean_and_stddevs>`
        for spec of input and result values.
        """
        # Get method from superclass
        mean, stddevs = super(
            AbrahamsonEtAl2015SSlabHighEpiLow, self).get_mean_and_stddevs(
                sites, rup, dists, imt, stddev_types)
        return mean - BC_HYDRO_EPISTEMIC, stddevs


class AbrahamsonEtAl2015SSlabHighEpiHigh(AbrahamsonEtAl2015SSlabHigh):
    """
    Modification to Abrahamson et al. (2015) BC Hydro GMPE for the "high"
    branch and "high" epistemic adjustment (proposed in the Hanford Site PSHA)
    - Inslab
    """
    def get_mean_and_stddevs(self, sites, rup, dists, imt, stddev_types):
        """
        See :meth:`superclass method
        <.base.GroundShakingIntensityModel.get_mean_and_stddevs>`
        for spec of input and result values.
        """
        # Get method from superclass
        mean, stddevs = super(
            AbrahamsonEtAl2015SSlabHighEpiHigh, self).get_mean_and_stddevs(
                sites, rup, dists, imt, stddev_types)
        return mean + BC_HYDRO_EPISTEMIC, stddevs
